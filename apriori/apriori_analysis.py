import pandas as pd
from mlxtend.frequent_patterns import apriori, association_rules

# Определяем основные проблемы, упомянутые жителями
problems = [
    "Иллюминация/вывеска ТЦ",
    "Пробки из-за ТЦ",
    "Проблемы с парковкой",
    "Шум",
    "Внешний вид ТЦ",
    "Проблемы с метро"
]

# Создаем таблицу "житель-проблема"
# 1 - если житель упомянул проблему, 0 - если нет
data = [
    [1, 0, 0, 0, 0, 0],  # Житель 1: иллюминация
    [0, 1, 0, 0, 0, 0],  # Житель 2: пробки
    [0, 0, 1, 0, 0, 1],  # Житель 3: парковка, метро
    [1, 0, 0, 0, 0, 0],  # Житель 4: вывеска/иллюминация
    [0, 0, 0, 0, 1, 0],  # Житель 5: внешний вид
    [0, 0, 1, 0, 0, 1],  # Житель 6: парковка, метро
    [0, 0, 0, 0, 1, 0],  # Житель 7: внешний вид (хотя и не считает проблемой)
    [1, 0, 0, 1, 0, 0],  # Житель 8: иллюминация, шум
]

# Создаем таблицу данных
df = pd.DataFrame(data, columns=problems)

# Считаем, сколько жителей упомянули каждую проблему
problem_counts = df.sum().sort_values(ascending=False)
print("ЧАСТОТА УПОМИНАНИЯ ПРОБЛЕМ:")
for problem, count in problem_counts.items():
    print(f"{problem}: {count} жителей ({count/len(df)*100:.1f}%)")

# Анализируем отношение жителей к ТЦ
attitudes = ["Против ТЦ", "Против ТЦ", "Нейтрально", "За ТЦ с оговорками", 
             "Против ТЦ", "Нейтрально", "За ТЦ с оговорками", "Против ТЦ"]
attitude_counts = pd.Series(attitudes).value_counts()
print("\nОТНОШЕНИЕ К ТЦ:")
for attitude, count in attitude_counts.items():
    print(f"{attitude}: {count} жителей ({count/len(attitudes)*100:.1f}%)")

# Применяем алгоритм Apriori для поиска частых наборов проблем
frequent_itemsets = apriori(df, min_support=0.2, use_colnames=True)
print("\nЧАСТЫЕ НАБОРЫ ПРОБЛЕМ:")
print(frequent_itemsets)

# Ищем связи между проблемами
rules = association_rules(frequent_itemsets, metric="confidence", min_threshold=0.6)
if not rules.empty:
    print("\nСВЯЗИ МЕЖДУ ПРОБЛЕМАМИ:")
    print(rules[['antecedents', 'consequents', 'support', 'confidence']])
else:
    print("\nЯвных связей между проблемами не обнаружено")

# Формулируем рекомендации
print("\nРЕКОМЕНДАЦИИ:")
print("1. Основные проблемы, требующие решения:")
for problem, count in problem_counts.items():
    if count >= 2:  # Если проблему упомянули хотя бы 2 жителя
        print(f"   - {problem} ({count} упоминаний)")

print("\n2. Предлагаемые решения:")
if problem_counts.get("Иллюминация/вывеска ТЦ", 0) >= 2:
    print("   - Ограничить яркость и время работы вывески/иллюминации ТЦ в ночное время")
if problem_counts.get("Проблемы с парковкой", 0) >= 2:
    print("   - Организовать дополнительные парковочные места или ввести систему резидентных разрешений")
if problem_counts.get("Пробки из-за ТЦ", 0) >= 1:
    print("   - Оптимизировать дорожное движение вокруг ТЦ")
if problem_counts.get("Проблемы с метро", 0) >= 2:
    print("   - Создать транспортно-пересадочный узел с достаточным количеством парковочных мест")

print("\n3. Формулировка жалобы в администрацию:")
print("""
В администрацию района
от инициативной группы жителей

ЖАЛОБА

Мы, жители района, обращаемся с просьбой решить ряд проблем, возникших после открытия 
торгового центра по адресу [адрес].

В результате проведенного опроса были выявлены следующие основные проблемы:
""")

problem_number = 1
for problem, count in problem_counts.items():
    if count >= 2:  # Если проблему упомянули хотя бы 2 жителя
        print(f"{problem_number}. {problem} - вызывает дискомфорт у {count} опрошенных жителей.")
        problem_number += 1

print("""
В связи с вышеизложенным, просим:
""")

request_number = 1
if problem_counts.get("Иллюминация/вывеска ТЦ", 0) >= 2:
    print(f"{request_number}. Ограничить яркость и время работы вывески/иллюминации ТЦ в ночное время (с 23:00 до 7:00).")
    request_number += 1
if problem_counts.get("Проблемы с парковкой", 0) >= 2:
    print(f"{request_number}. Организовать дополнительные парковочные места для жителей района и ввести систему резидентных разрешений.")
    request_number += 1
if problem_counts.get("Пробки из-за ТЦ", 0) >= 1:
    print(f"{request_number}. Оптимизировать дорожное движение вокруг ТЦ, рассмотреть возможность расширения проезжей части.")
    request_number += 1
if problem_counts.get("Проблемы с метро", 0) >= 2:
    print(f"{request_number}. Создать транспортно-пересадочный узел с достаточным количеством парковочных мест.")
    request_number += 1

print("""
Надеемся на понимание и скорейшее решение указанных проблем.

С уважением,
Инициативная группа жителей района
[Подписи]
[Дата]
""")